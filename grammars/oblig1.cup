package oblig1parser;
import java_cup.runtime.*;
import syntaxtree.*;
import java.util.*;

parser code {:

:};

/* Terminals */
terminal                        CLASS; 
terminal                        REFERENCE;
terminal                        PROCEDURE;
terminal                        VARIABLE;
terminal	                      ASSIGNMENT;
terminal String                 FLOAT, INT, STRING, BOOL;
terminal 			                  LBRACK, RBRACK;
terminal                        LCHEV, LCHEVEQ, RCHEV, RCHEVEQ;
terminal                        EQUALS, NEQUAL;
terminal                        AND, OR, NOT;
terminal                        TRUE, FALSE;
terminal                        NULL;
terminal                        DOT;
terminal                        NEW;
terminal                        PLUS, MINUS, TIMES, DIVIDE, EXPO;
terminal 			                  LPAR, RPAR;
terminal                        SEMI, RETURN;
terminal			                  IF, THEN, ELSE, WHILE, DO;
terminal			                  RET;
terminal			                  COMMA;

terminal String                 ID;
terminal String                 STRING_LITERAL;
terminal String			            NAME;
terminal String                 INT_LITERAL;
terminal String                 FLOAT_LITERAL;

/* Non terminals */
non terminal Program	          program;
non terminal Decl               decl;
non terminal List<Decl>         decl_list;
non terminal VarDecl            var_decl;
non terminal List<Decl>         var_list;
non terminal ProcDecl           proc_decl; 
non terminal String             proc_decl_type;
non terminal List<Decl>         proc_decl_decls;
non terminal ClassDecl          class_decl;
non terminal ParamDecl          param_decl;
non terminal List<Decl>         param_list;
non terminal Boolean            param_ref;

non terminal Exp                exp;
non terminal Exp                var;
non terminal String             log_op;
non terminal String             rel_op;
non terminal String             arit_op;
non terminal Exp                literal;
non terminal String             type;

non terminal Stmt               stmt;
non terminal List<Stmt>         stmts;
non terminal List<Stmt>         stmt_list;

non terminal Stmt               assign_stmt;
non terminal Stmt               if_stmt;
non terminal List<Stmt>         if_else;
non terminal Stmt               while_stmt;
non terminal Stmt               return_stmt;
non terminal Exp                return_val;
non terminal CallStmt           call_stmt;
non terminal List<Exp>          call_params;
non terminal Exp                actual_param;


precedence left OR;
precedence left AND;
precedence left NOT;
precedence nonassoc LCHEV, LCHEVEQ, RCHEV, RCHEVEQ, EQUALS, NEQUAL;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right EXPO;
precedence left DOT;

/* The grammar */
program			            ::= decl_list:dl
                          {: RESULT = new Program(dl); :} 
				                ;

decl_list               ::= decl:d {: List<Decl> l = new LinkedList<Decl>();
                            if (d != null) l.add(d);
                            RESULT = l; :} 
                          | decl_list:dl decl:d 
                            {: if (d != null) dl.add(d); RESULT = dl; :}
                        ;

decl                    ::= class_decl:sd {: RESULT = sd; :}
                          | proc_decl:pd {:RESULT = pd; :} 
                          | var_decl:vd {: RESULT = vd; :}
                        ;
                        

var_decl                ::= VARIABLE type:t ID:name SEMI
                          {: RESULT = new VarDecl(name, t); :} 
                        ;

var_list                ::= decl_list:l {: RESULT = l; :}
                          | {: RESULT = null; :}
                        ; 

proc_decl               ::= PROCEDURE proc_decl_type:t ID:n
                            LPAR param_list:pl RPAR
                            LBRACK proc_decl_decls:pd stmts:st RBRACK
                            
                            {: RESULT = new ProcDecl(n, t, pl, pd, st); :}
                        ; 

proc_decl_decls         ::= decl_list:dl {:RESULT = dl; :}
                            | {:RESULT = null; :}
                        ;

proc_decl_type          ::= RET type:t {: RESULT = t; :}
                            | {: RESULT = null; :}
                        ;
                        
class_decl		          ::= CLASS ID:name LBRACK var_list:v RBRACK
                          {: RESULT = new ClassDecl(name, v); :}
				                ;

param_decl              ::= param_ref:ref type:t ID:name {: RESULT = new ParamDecl(name, t, ref); :}
                            | {:RESULT = null; :}
                        ;
                        
param_ref               ::= REFERENCE {: RESULT = true; :}
                            | {:RESULT = false; :}
                        ;

param_list              ::= param_decl:p {: List<Decl> l = new LinkedList<Decl>();
                            if (p != null) l.add(p);
                            RESULT = l; :} 
                          | param_list:pl COMMA param_decl:p 
                            {: if (p != null) pl.add(p); RESULT = pl; :}
                        ;

exp                     ::= exp:e1 log_op:op exp:e2
                               {: RESULT = new OpExp("LOG_OP", e1, e2, op); :}
                            | NOT exp:e1
                               {: RESULT = new OpExp("NOT", e1, null, ""); :}
                            | exp:e1 rel_op:op exp:e2 
                              {: RESULT = new OpExp("REL_OP", e1, e2, op); :}
                            | exp:e1 arit_op:op exp:e2
                              {: RESULT = new OpExp("ARIT_OP", e1, e2, op); :}
                            | LPAR exp:ex RPAR
                              {: RESULT = ex; :}
                            | literal:l
                              {: RESULT = l; :}
                            | call_stmt:cs
                              {: CallExp ce = cs.gexp(); RESULT = ce; :}
                            | NEW ID:name
                              {: RESULT = new OpExp("NEW", null, null, name); :}
                            | var:v 
                              {: RESULT = v; :}
                        ;

var                     ::= ID:name {: RESULT = new NameExp(name, false); :} 
                            | exp:ex DOT ID:name 
                              {: RESULT = new NameExp(name, ex, false); :}
                        ;

log_op                  ::= AND         {: RESULT = "&&"; :} 
                            | OR        {: RESULT = "||"; :}
                        ;
                        
rel_op                  ::= LCHEV       {: RESULT = "<"; :}
                            | LCHEVEQ   {: RESULT = "<="; :}
                            | RCHEV     {: RESULT = ">"; :}
                            | RCHEVEQ   {: RESULT = ">="; :}
                            | EQUALS    {: RESULT = "="; :}
                            | NEQUAL    {: RESULT = "<>"; :}
                        ;
                        
arit_op                 ::= PLUS        {: RESULT = "+"; :}
                            | MINUS     {: RESULT = "-"; :}
                            | TIMES     {: RESULT = "*"; :}
                            | DIVIDE    {: RESULT = "/"; :}
                            | EXPO      {: RESULT = "**"; :}
                        ;

literal                 ::= FLOAT_LITERAL:f
                              {: RESULT = new LiteralExp("FLOAT", ""+f); :} 
                            | INT_LITERAL:i
                              {: RESULT = new LiteralExp("INT", ""+i); :}
                            | STRING_LITERAL:s
                              {: RESULT = new LiteralExp("STRING", "\"" + s + "\""); :}
                            | TRUE
                              {: RESULT = new LiteralExp("BOOL", "true"); :}
                            | FALSE
                              {: RESULT = new LiteralExp("BOOL", "false"); :}
                            | NULL
                              {: RESULT = new LiteralExp("NULL", "null"); :}
                        ;

stmt                    ::= assign_stmt:as SEMI    {: RESULT = as; :}
                            | if_stmt:is           {: RESULT = is; :}
                            | while_stmt:ws        {: RESULT = ws; :}
			                      | return_stmt:rs SEMI  {: RESULT = rs; :}
			                      | call_stmt:cs SEMI    {: RESULT = cs; :}
			                  ;
                            
stmt_list               ::= stmt:s {: List<Stmt> l = new LinkedList<Stmt>();
                            if (s != null) l.add(s);
                            RESULT = l; :} 
                          | stmt_list:sl stmt:s 
                            {: if (s != null) sl.add(s); RESULT = sl; :}
                        ;

stmts                   ::= stmt_list:sl {: RESULT = sl; :}
                            | {: RESULT = null; :}
                        ;

assign_stmt             ::= var:v ASSIGNMENT exp:e 
                            {: RESULT = new AssignStmt(v, e); :} 
			                  ;

if_stmt                 ::= IF exp:ex THEN LBRACK stmts:st RBRACK if_else:el
                            {: RESULT = new IfStmt(ex, st, el); :}
                        ;

if_else                 ::= ELSE LBRACK stmts:st RBRACK {: RESULT = st; :}
                            | {: RESULT = null; :}
                        ;

while_stmt              ::= WHILE exp:ex DO LBRACK stmts:st RBRACK
                            {: RESULT = new WhileStmt(ex, st); :}
                        ;

return_stmt             ::= RETURN exp:e {:RESULT = new ReturnStmt(e); :}
                            | RETURN {: RESULT = new ReturnStmt(null); :}
			                  ;

call_stmt               ::= ID:name LPAR call_params:cp RPAR
                            {: RESULT = new CallStmt(name, cp); :}
                        ;
                        
call_params             ::= actual_param:p {: List<Exp> l = new LinkedList<Exp>();
                            if (p != null) l.add(p);
                            RESULT = l; :} 
                          | call_params:cp COMMA actual_param:p 
                            {: if (p != null) cp.add(p); RESULT = cp; :}
                        ;

actual_param            ::= REFERENCE ID:name   {: RESULT = new NameExp(name, true); :}
                            | exp:e           {: RESULT = e; :}
                            |                 {: RESULT = null; :}

                        ;

type                    ::= FLOAT     {: RESULT = "float";  :}
                            | INT     {: RESULT = "int";    :}
                            | STRING  {: RESULT = "string"; :} 
                            | BOOL    {: RESULT = "bool";   :}
                            | ID:name {: RESULT = name;     :}
                        ;

